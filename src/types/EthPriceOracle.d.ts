/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EthPriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "addOracle(address)": FunctionFragment;
    "getLatestEthPrice()": FunctionFragment;
    "removeOracle(address)": FunctionFragment;
    "requestIdToResponse(uint256,uint256)": FunctionFragment;
    "setLatestEthPrice(uint256,address,uint256)": FunctionFragment;
    "setThreshold(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLatestEthPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToResponse",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestEthPrice",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;

  events: {
    "AddOracleEvent(address)": EventFragment;
    "GetLatestEthPriceEvent(address,uint256)": EventFragment;
    "RemoveOracleEvent(address)": EventFragment;
    "SetLatestEthPriceEvent(uint256,address)": EventFragment;
    "SetThresholdEvent(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOracleEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetLatestEthPriceEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveOracleEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLatestEthPriceEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetThresholdEvent"): EventFragment;
}

export type AddOracleEventEvent = TypedEvent<
  [string] & { oracleAddress: string }
>;

export type GetLatestEthPriceEventEvent = TypedEvent<
  [string, BigNumber] & { callerAddress: string; id: BigNumber }
>;

export type RemoveOracleEventEvent = TypedEvent<
  [string] & { oracleAddress: string }
>;

export type SetLatestEthPriceEventEvent = TypedEvent<
  [BigNumber, string] & { ethPrice: BigNumber; callerAddress: string }
>;

export type SetThresholdEventEvent = TypedEvent<
  [BigNumber] & { threshold: BigNumber }
>;

export class EthPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EthPriceOracleInterface;

  functions: {
    addOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLatestEthPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestIdToResponse(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        oracleAddress: string;
        callerAddress: string;
        ethPrice: BigNumber;
      }
    >;

    setLatestEthPrice(
      _ethPrice: BigNumberish,
      _callerAddress: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOracle(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLatestEthPrice(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOracle(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestIdToResponse(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      oracleAddress: string;
      callerAddress: string;
      ethPrice: BigNumber;
    }
  >;

  setLatestEthPrice(
    _ethPrice: BigNumberish,
    _callerAddress: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    getLatestEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    removeOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    requestIdToResponse(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        oracleAddress: string;
        callerAddress: string;
        ethPrice: BigNumber;
      }
    >;

    setLatestEthPrice(
      _ethPrice: BigNumberish,
      _callerAddress: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddOracleEvent(address)"(
      oracleAddress?: null
    ): TypedEventFilter<[string], { oracleAddress: string }>;

    AddOracleEvent(
      oracleAddress?: null
    ): TypedEventFilter<[string], { oracleAddress: string }>;

    "GetLatestEthPriceEvent(address,uint256)"(
      callerAddress?: null,
      id?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { callerAddress: string; id: BigNumber }
    >;

    GetLatestEthPriceEvent(
      callerAddress?: null,
      id?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { callerAddress: string; id: BigNumber }
    >;

    "RemoveOracleEvent(address)"(
      oracleAddress?: null
    ): TypedEventFilter<[string], { oracleAddress: string }>;

    RemoveOracleEvent(
      oracleAddress?: null
    ): TypedEventFilter<[string], { oracleAddress: string }>;

    "SetLatestEthPriceEvent(uint256,address)"(
      ethPrice?: null,
      callerAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { ethPrice: BigNumber; callerAddress: string }
    >;

    SetLatestEthPriceEvent(
      ethPrice?: null,
      callerAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { ethPrice: BigNumber; callerAddress: string }
    >;

    "SetThresholdEvent(uint256)"(
      threshold?: null
    ): TypedEventFilter<[BigNumber], { threshold: BigNumber }>;

    SetThresholdEvent(
      threshold?: null
    ): TypedEventFilter<[BigNumber], { threshold: BigNumber }>;
  };

  estimateGas: {
    addOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLatestEthPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestIdToResponse(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setLatestEthPrice(
      _ethPrice: BigNumberish,
      _callerAddress: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLatestEthPrice(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestIdToResponse(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLatestEthPrice(
      _ethPrice: BigNumberish,
      _callerAddress: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
