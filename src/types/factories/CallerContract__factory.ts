/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CallerContract,
  CallerContractInterface,
} from "../CallerContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "ethPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "PriceUpdatedEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ReceivedNewRequestIdEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oracleAddress",
        type: "address",
      },
    ],
    name: "newOracleAddressEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ethPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "callback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oracleInstanceAddress",
        type: "address",
      },
    ],
    name: "setOracleInstanceAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateEthPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610a52806100db6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638f32d59b1161005b5780638f32d59b146100b4578063b5d73ba4146100d2578063e9e17a9e146100ee578063f2fde38b1461010a5761007d565b806323c7e4a214610082578063715018a61461008c5780638da5cb5b14610096575b600080fd5b61008a610126565b005b610094610232565b005b61009e610301565b6040516100ab919061083d565b60405180910390f35b6100bc61032a565b6040516100c99190610858565b60405180910390f35b6100ec60048036038101906100e7919061078e565b610381565b005b6101086004803603810190610103919061073c565b6104d8565b005b610124600480360381019061011f919061073c565b6105e9565b005b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330c0b9ec6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561019257600080fd5b505af11580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca9190610765565b905060016004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f3ed150819af981e387450beb90ec379b8b322150dbb299d492b108c59a623e4b8160405161022791906108b3565b60405180910390a150565b61023a61032a565b61024357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610411576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040890610873565b60405180910390fd5b6004600082815260200190815260200160002060009054906101000a900460ff16610471576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046890610893565b60405180910390fd5b816001819055506004600082815260200190815260200160002060006101000a81549060ff02191690557f6b69e4f2aedf7e65a79ecaf16e8869b2b99c87e341f2c51286bfd4a7fc3b996982826040516104cc9291906108ce565b60405180910390a15050565b6104e061032a565b6104e957600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f441e3b056b114797955165bd03bb8393fc1658a713f09225de4745a8d068bf7d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105de919061083d565b60405180910390a150565b6105f161032a565b6105fa57600080fd5b61060381610606565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561064057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008135905061070c816109ee565b92915050565b60008135905061072181610a05565b92915050565b60008151905061073681610a05565b92915050565b60006020828403121561074e57600080fd5b600061075c848285016106fd565b91505092915050565b60006020828403121561077757600080fd5b600061078584828501610727565b91505092915050565b600080604083850312156107a157600080fd5b60006107af85828601610712565b92505060206107c085828601610712565b9150509250929050565b6107d381610908565b82525050565b6107e28161091a565b82525050565b60006107f5602d836108f7565b915061080082610950565b604082019050919050565b60006108186027836108f7565b91506108238261099f565b604082019050919050565b61083781610946565b82525050565b600060208201905061085260008301846107ca565b92915050565b600060208201905061086d60008301846107d9565b92915050565b6000602082019050818103600083015261088c816107e8565b9050919050565b600060208201905081810360008301526108ac8161080b565b9050919050565b60006020820190506108c8600083018461082e565b92915050565b60006040820190506108e3600083018561082e565b6108f0602083018461082e565b9392505050565b600082825260208201905092915050565b600061091382610926565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f596f7520617265206e6f7420617574686f72697a656420746f2063616c6c207460008201527f6869732066756e6374696f6e2e00000000000000000000000000000000000000602082015250565b7f546869732072657175657374206973206e6f7420696e206d792070656e64696e60008201527f67206c6973742e00000000000000000000000000000000000000000000000000602082015250565b6109f781610908565b8114610a0257600080fd5b50565b610a0e81610946565b8114610a1957600080fd5b5056fea26469706673582212200d717a6b49dbfb59a3ec03806a4737127215458caceee8ebe04a6376fd407a7664736f6c63430008040033";

export class CallerContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CallerContract> {
    return super.deploy(overrides || {}) as Promise<CallerContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CallerContract {
    return super.attach(address) as CallerContract;
  }
  connect(signer: Signer): CallerContract__factory {
    return super.connect(signer) as CallerContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallerContractInterface {
    return new utils.Interface(_abi) as CallerContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallerContract {
    return new Contract(address, _abi, signerOrProvider) as CallerContract;
  }
}
