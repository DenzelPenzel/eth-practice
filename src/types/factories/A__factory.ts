/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { A, AInterface } from "../A";

const _abi = [
  {
    inputs: [],
    name: "getA",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
    ],
    name: "setA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610134806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063d46300fd146037578063ee919d50146051575b600080fd5b603d6069565b6040516048919060c7565b60405180910390f35b60676004803603810190606391906094565b6075565b005b60008060000154905090565b80600080018190555050565b600081359050608e8160ea565b92915050565b60006020828403121560a557600080fd5b600060b1848285016081565b91505092915050565b60c18160e0565b82525050565b600060208201905060da600083018460ba565b92915050565b6000819050919050565b60f18160e0565b811460fb57600080fd5b5056fea26469706673582212208e951ddd1f56776c86072eb1ce65da4a66958f1a2ef660dcc408194d07e48f4064736f6c63430008040033";

export class A__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<A> {
    return super.deploy(overrides || {}) as Promise<A>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): A {
    return super.attach(address) as A;
  }
  connect(signer: Signer): A__factory {
    return super.connect(signer) as A__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AInterface {
    return new utils.Interface(_abi) as AInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): A {
    return new Contract(address, _abi, signerOrProvider) as A;
  }
}
