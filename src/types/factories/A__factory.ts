/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { A, AInterface } from "../A";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
    ],
    name: "setA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610111806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ee919d5014602d575b600080fd5b60436004803603810190603f91906097565b6045565b005b6000604d605c565b90508181600001819055505050565b60007f3132330000000000000000000000000000000000000000000000000000000000905090565b60008135905060918160c7565b92915050565b60006020828403121560a857600080fd5b600060b4848285016084565b91505092915050565b6000819050919050565b60ce8160bd565b811460d857600080fd5b5056fea2646970667358221220fd0f3ad6f9c33484c02b49e0702c3d723451783887fa8d720e4ea60daa8fdb9c64736f6c63430008040033";

export class A__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<A> {
    return super.deploy(overrides || {}) as Promise<A>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): A {
    return super.attach(address) as A;
  }
  connect(signer: Signer): A__factory {
    return super.connect(signer) as A__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AInterface {
    return new utils.Interface(_abi) as AInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): A {
    return new Contract(address, _abi, signerOrProvider) as A;
  }
}
